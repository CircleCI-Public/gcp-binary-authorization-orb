version: 2.1

orbs:
  bin-authz: circleci/gcp-binary-authorization@dev:alpha
  gcp-cli: circleci/gcp-cli@1.5.0
  gcp-gcr: circleci/gcp-gcr@0.6.0
  orb-tools: circleci/orb-tools@8.15.0
  queue: eddiewebb/queue@1.1.2

commands:
  cleanup:
    parameters:
      attestor:
        type: string
        default: ""
      cluster-name:
        type: string
      cleanup-keys:
        type: boolean
        default: true
      public-key:
        type: string
        default: ""
      private-key:
        type: string
        default: ""
    steps:
      - cleanup-attestor:
          attestor: <<parameters.attestor>>

      - cleanup-cluster:
          cluster-name: <<parameters.cluster-name>>

      - when:
          condition: <<parameters.cleanup-keys>>
          steps:
            - cleanup-env-vars:
                public-key: <<parameters.public-key>>
                private-key: <<parameters.private-key>>

  cleanup-attestor:
    parameters:
      attestor:
        type: string
    steps:
      - run:
          when: always
          name: Cleanup attestor
          command: |
            gcloud alpha container binauthz attestors delete <<parameters.attestor>>

  cleanup-cluster:
    parameters:
      cluster-name:
        type: string
    steps:
      - run:
          when: always
          name: Cleanup cluster
          command: |
            gcloud container clusters delete --quiet \
              <<parameters.cluster-name>>

  resize-cluster:
    parameters:
      cluster-name:
        type: string
      num-nodes:
        type: string
    steps:
      - run:
          when: always
          name: Resize cluster to <<parameters.num-nodes>> nodes
          command: |
            gcloud container clusters resize --quiet \
              <<parameters.cluster-name>> \
              --num-nodes <<parameters.num-nodes>>

  cleanup-env-vars:
    parameters:
      public-key:
        type: string
      private-key:
        type: string
    steps:
      - run:
          when: always
          name: Cleanup env vars
          command: |
            curl -X DELETE \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/envvar/<<parameters.public-key>>?circle-token=$CIRCLE_TOKEN

            curl -X DELETE \
              https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/envvar/<<parameters.private-key>>?circle-token=$CIRCLE_TOKEN

# yaml anchor filters
integration-dev_filters: &integration-dev_filters
  branches:
    ignore: /.*/
  tags:
    only: /integration-.*/

integration-master_filters: &integration-master_filters
  branches:
    ignore: /.*/
  tags:
    only: /master-.*/

prod-deploy_requires: &prod-deploy_requires
  [
    single-project-google-master,
    single-project-machine-master,
    single-project-docker-master,
    multi-project-google-master,
    multi-project-machine-master,
    multi-project-docker-master
  ]

workflows:
  lint_pack-validate_publish-dev:
    jobs:
      - orb-tools/lint

      - orb-tools/pack:
          requires: [orb-tools/lint]

      - orb-tools/publish-dev:
          orb-name: circleci/gcp-binary-authorization
          context: orb-publishing
          requires: [orb-tools/pack]

      - queue/block_workflow:
          consider-branch: false
          requires: [orb-tools/publish-dev]

      - orb-tools/trigger-integration-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          ssh-fingerprints: 30:41:9c:09:66:60:a9:95:1a:b2:ce:07:22:50:ca:85
          requires: [queue/block_workflow]
          filters:
            branches:
              ignore: master

      - orb-tools/trigger-integration-workflow:
          name: trigger-integration-master
          context: orb-publishing
          ssh-fingerprints: 30:41:9c:09:66:60:a9:95:1a:b2:ce:07:22:50:ca:85
          tag: master
          cleanup-tags: true
          requires: [queue/block_workflow]
          filters:
            branches:
              only: master

  integration-tests_prod-release:
    jobs:
      # --------------------------------------
      # triggered by non-master branch commits
      # --------------------------------------

      # - gcp-cli/install_and_initialize_cli:
      #     name: upsize-long-running-cluster-single-proj-dev
      #     gcloud-service-key: GOOGLE_SERVICE_KEY
      #     google-project-id: GOOGLE_PROJECT_ID
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - resize-cluster:
      #           cluster-name: binauthz-orb-test-cluster-single-proj
      #           num-nodes: "8"

      # - gcp-cli/install_and_initialize_cli:
      #     name: upsize-long-running-cluster-multi-proj-dev
      #     gcloud-service-key: DEPLOYER_SERVICE_KEY
      #     google-project-id: DEPLOYER_PROJECT_ID
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - resize-cluster:
      #           cluster-name: binauthz-orb-test-cluster-multi-proj
      #           num-nodes: "8"

      - gcp-gcr/build-and-push-image:
          name: create-attestation-artifact-long-running-cluster-dev
          registry-url: us.gcr.io
          image: sample-image
          tag: ${CIRCLE_SHA1:0:7}
          filters: *integration-dev_filters

      # >>>>>>>>>>>>>>
      # SINGLE-PROJECT
      # >>>>>>>>>>>>>>

      # generate/store keypair w/ passphrase
      # no cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: single-project-google-dev
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: single-project-google
      #     # keypair
      #     use-existing-keypair: false
      #     keypair-name: single-project-google
      #     keypair-email: community-partner@circleci.com
      #     use-passphrase: true
      #     public-key: SINGLE_PROJECT_GOOGLE_PUB_KEY
      #     private-key: SINGLE_PROJECT_GOOGLE_PRIV_KEY
      #     # attestor
      #     attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #           cluster-name: single-project-google
      #           public-key: SINGLE_PROJECT_GOOGLE_PUB_KEY
      #           private-key: SINGLE_PROJECT_GOOGLE_PRIV_KEY

      # generate/store keypair w/o passphrase
      # cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: single-project-machine-dev
      #     executor: bin-authz/machine
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: single-project-machine
      #     # keypair
      #     use-existing-keypair: false
      #     keypair-name: single-project-machine
      #     keypair-email: community-partner@circleci.com
      #     use-passphrase: false
      #     public-key: SINGLE_PROJECT_MACHINE_PUB_KEY
      #     private-key: SINGLE_PROJECT_MACHINE_PRIV_KEY
      #     # attestor
      #     attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     cluster-specific-rules: true
      #     cluster-specific-specifier: CLUSTER_SPECIFIER_SINGLE_MACHINE
      #     cluster-specific-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #           cluster-name: single-project-machine
      #           public-key: SINGLE_PROJECT_MACHINE_PUB_KEY
      #           private-key: SINGLE_PROJECT_MACHINE_PRIV_KEY

      # use existing keypair (w/ pw)
      # no cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: single-project-docker-dev
      #     executor: gcp-cli/default
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: single-project-docker
      #     # keypair
      #     keypair-email: community-partner@circleci.com
      #     use-passphrase: true
      #     public-key: BIN_AUTHZ_PUBLIC_KEY_WITH_PW
      #     private-key: BIN_AUTHZ_PRIVATE_KEY_WITH_PW
      #     # attestor
      #     attestor: existing-keypair-attestor-with-pw
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/existing-keypair-attestor-with-pw
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: existing-keypair-attestor-with-pw
      #           cluster-name: single-project-docker

      # use existing keypair (w/ pw)
      # long-running cluster, attestor
      - bin-authz/create-attestation:
          name: single-project-long-running-dev
          gke-cluster-name: binauthz-orb-test-cluster-single-proj
          # keypair
          keypair-email: community-partner@circleci.com
          use-passphrase: true
          public-key: BIN_AUTHZ_PUBLIC_KEY_WITH_PW
          private-key: BIN_AUTHZ_PRIVATE_KEY_WITH_PW
          # policy
          configure-policy: true
          default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME
          # image/attestation
          image-path: gcr.io/gcp-gcr-orb/sample-image
          image-tag: ${CIRCLE_SHA1:0:7}
          # circle
          filters: *integration-dev_filters
          requires: [create-attestation-artifact-long-running-cluster-dev]
          # upsize-long-running-cluster-single-proj-dev,
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-single-proj
                num-nodes: "0"

      # >>>>>>>>>>>>>
      # MULTI-PROJECT
      # >>>>>>>>>>>>>

      # generate/store keypair w/ passphrase
      # cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: multi-project-google-dev
      #     multi-project-setup: true
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: multi-project-google
      #     # keypair
      #     use-existing-keypair: false
      #     keypair-name: multi-project-google
      #     keypair-email: community-partner@circleci.com
      #     use-passphrase: true
      #     public-key: MULTI_PROJECT_GOOGLE_PUB_KEY
      #     private-key: MULTI_PROJECT_GOOGLE_PRIV_KEY
      #     # attestor
      #     attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     cluster-specific-rules: true
      #     cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
      #     cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #           cluster-name: multi-project-google
      #           public-key: MULTI_PROJECT_GOOGLE_PUB_KEY
      #           private-key: MULTI_PROJECT_GOOGLE_PRIV_KEY

      # generate/store keypair w/o passphrase
      # no cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: multi-project-machine-dev
      #     executor: bin-authz/machine
      #     multi-project-setup: true
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: multi-project-machine
      #     # keypair
      #     use-existing-keypair: false
      #     keypair-name: multi-project-machine
      #     keypair-email: community-partner@circleci.com
      #     use-passphrase: false
      #     public-key: MULTI_PROJECT_MACHINE_PUB_KEY
      #     private-key: MULTI_PROJECT_MACHINE_PRIV_KEY
      #     # attestor
      #     attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
      #           cluster-name: multi-project-machine
      #           public-key: MULTI_PROJECT_MACHINE_PUB_KEY
      #           private-key: MULTI_PROJECT_MACHINE_PRIV_KEY

      # use existing keypair (passwordless)
      # cluster-specific rules
      # - bin-authz/create-attestation:
      #     name: multi-project-docker-dev
      #     executor: gcp-cli/default
      #     multi-project-setup: true
      #     # setup
      #     run-setup: true
      #     enable-apis: false
      #     create-new-gke-cluster: true
      #     gke-cluster-name: multi-project-docker
      #     # keypair
      #     keypair-email: community-partner@circleci.com
      #     public-key: BIN_AUTHZ_PUBLIC_KEY_PASSWORDLESS
      #     private-key: BIN_AUTHZ_PRIVATE_KEY_PASSWORDLESS
      #     # attestor
      #     attestor: existing-keypair-attestor-passwordless
      #     # policy
      #     configure-policy: true
      #     default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
      #     cluster-specific-rules: true
      #     cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
      #     cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
      #     # image/attestation
      #     image-path: gcr.io/google-containers/google-containers-test-image
      #     image-tag: "2017-01-23"
      #     # circle
      #     filters: *integration-dev_filters
      #     post-steps:
      #       - cleanup:
      #           attestor: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
      #           cluster-name: multi-project-docker

      # use existing keypair (passwordless)
      # long-running cluster, attestor
      - bin-authz/create-attestation:
          name: multi-project-long-running-dev
          multi-project-setup: true
          gke-cluster-name: binauthz-orb-test-cluster-multi-proj
          # keypair
          keypair-email: community-partner@circleci.com
          public-key: BIN_AUTHZ_PUBLIC_KEY_PASSWORDLESS
          private-key: BIN_AUTHZ_PRIVATE_KEY_PASSWORDLESS
          # policy
          configure-policy: true
          default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME
          cluster-specific-rules: true
          cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
          cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME
          # image/attestation
          image-path: gcr.io/gcp-gcr-orb/sample-image
          image-tag: ${CIRCLE_SHA1:0:7}
          # circle
          filters: *integration-dev_filters
          requires: [create-attestation-artifact-long-running-cluster-dev]
          # upsize-long-running-cluster-multi-proj-dev,
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-multi-proj
                num-nodes: "0"

      # ----------------------------------
      # triggered by master branch commits
      # ----------------------------------

      - gcp-cli/install_and_initialize_cli:
          name: upsize-long-running-cluster-single-proj-master
          gcloud-service-key: GOOGLE_SERVICE_KEY
          google-project-id: GOOGLE_PROJECT_ID
          filters: *integration-master_filters
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-single-proj
                num-nodes: "8"

      - gcp-cli/install_and_initialize_cli:
          name: upsize-long-running-cluster-multi-proj-master
          gcloud-service-key: DEPLOYER_SERVICE_KEY
          google-project-id: DEPLOYER_PROJECT_ID
          filters: *integration-master_filters
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-multi-proj
                num-nodes: "8"

      # >>>>>>>>>>>>>>
      # SINGLE-PROJECT
      # >>>>>>>>>>>>>>

      # generate/store keypair w/ passphrase
      # no cluster-specific rules
      - bin-authz/create-attestation:
          name: single-project-google-master
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: single-project-google
          # keypair
          use-existing-keypair: false
          keypair-name: single-project-google
          keypair-email: community-partner@circleci.com
          use-passphrase: true
          public-key: SINGLE_PROJECT_GOOGLE_PUB_KEY
          private-key: SINGLE_PROJECT_GOOGLE_PRIV_KEY
          # attestor
          attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # policy
          configure-policy: true
          default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
                cluster-name: single-project-google
                public-key: SINGLE_PROJECT_GOOGLE_PUB_KEY
                private-key: SINGLE_PROJECT_GOOGLE_PRIV_KEY

      # generate/store keypair w/o passphrase
      # cluster-specific rules
      - bin-authz/create-attestation:
          name: single-project-machine-master
          executor: bin-authz/machine
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: single-project-machine
          # keypair
          use-existing-keypair: false
          keypair-name: single-project-machine
          keypair-email: community-partner@circleci.com
          use-passphrase: false
          public-key: SINGLE_PROJECT_MACHINE_PUB_KEY
          private-key: SINGLE_PROJECT_MACHINE_PRIV_KEY
          # attestor
          attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # policy
          configure-policy: true
          default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          cluster-specific-rules: true
          cluster-specific-specifier: CLUSTER_SPECIFIER_SINGLE_MACHINE
          cluster-specific-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
                cluster-name: single-project-machine
                public-key: SINGLE_PROJECT_MACHINE_PUB_KEY
                private-key: SINGLE_PROJECT_MACHINE_PRIV_KEY

      # use existing keypair (w/ pw)
      # no cluster-specific rules
      - bin-authz/create-attestation:
          name: single-project-docker-master
          executor: gcp-cli/default
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: single-project-docker
          # keypair
          keypair-email: community-partner@circleci.com
          use-passphrase: true
          public-key: BIN_AUTHZ_PUBLIC_KEY_WITH_PW
          private-key: BIN_AUTHZ_PRIVATE_KEY_WITH_PW
          # attestor
          attestor: existing-keypair-attestor-with-pw
          # policy
          configure-policy: true
          default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/existing-keypair-attestor-with-pw
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: existing-keypair-attestor-with-pw
                cluster-name: single-project-docker

      # use existing keypair (passwordless)
      # long-running cluster, attestor
      - bin-authz/create-attestation:
          name: single-project-long-running-master
          # keypair
          keypair-email: community-partner@circleci.com
          public-key: BIN_AUTHZ_PUBLIC_KEY_PASSWORDLESS
          private-key: BIN_AUTHZ_PRIVATE_KEY_PASSWORDLESS
          # policy
          configure-policy: true
          default-required-attestors: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME
          cluster-specific-rules: true
          cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
          cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          requires: [upsize-long-running-cluster-single-proj-master]
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-single-proj
                num-nodes: "0"

      # >>>>>>>>>>>>>
      # MULTI-PROJECT
      # >>>>>>>>>>>>>

      # generate/store keypair w/ passphrase
      # cluster-specific rules
      - bin-authz/create-attestation:
          name: multi-project-google-master
          multi-project-setup: true
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: multi-project-google
          # keypair
          use-existing-keypair: false
          keypair-name: multi-project-google
          keypair-email: community-partner@circleci.com
          use-passphrase: true
          public-key: MULTI_PROJECT_GOOGLE_PUB_KEY
          private-key: MULTI_PROJECT_GOOGLE_PRIV_KEY
          # attestor
          attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # policy
          configure-policy: true
          default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          cluster-specific-rules: true
          cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
          cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
                cluster-name: multi-project-google
                public-key: MULTI_PROJECT_GOOGLE_PUB_KEY
                private-key: MULTI_PROJECT_GOOGLE_PRIV_KEY

      # generate/store keypair w/o passphrase
      # no cluster-specific rules
      - bin-authz/create-attestation:
          name: multi-project-machine-master
          executor: bin-authz/machine
          multi-project-setup: true
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: multi-project-machine
          # keypair
          use-existing-keypair: false
          keypair-name: multi-project-machine
          keypair-email: community-partner@circleci.com
          use-passphrase: false
          public-key: MULTI_PROJECT_MACHINE_PUB_KEY
          private-key: MULTI_PROJECT_MACHINE_PRIV_KEY
          # attestor
          attestor: $CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # policy
          configure-policy: true
          default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME-$CIRCLE_BUILD_NUM
                cluster-name: multi-project-machine
                public-key: MULTI_PROJECT_MACHINE_PUB_KEY
                private-key: MULTI_PROJECT_MACHINE_PRIV_KEY

      # use existing keypair (passwordless)
      # cluster-specific rules
      - bin-authz/create-attestation:
          name: multi-project-docker-master
          executor: gcp-cli/default
          multi-project-setup: true
          # setup
          run-setup: true
          enable-apis: false
          create-new-gke-cluster: true
          gke-cluster-name: multi-project-docker
          # keypair
          keypair-email: community-partner@circleci.com
          public-key: BIN_AUTHZ_PUBLIC_KEY_PASSWORDLESS
          private-key: BIN_AUTHZ_PRIVATE_KEY_PASSWORDLESS
          # attestor
          attestor: existing-keypair-attestor-passwordless
          # policy
          configure-policy: true
          default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
          cluster-specific-rules: true
          cluster-specific-specifier: CLUSTER_SPECIFIER_MULTI_MACHINE
          cluster-specific-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          post-steps:
            - cleanup:
                attestor: projects/$ATTESTOR_PROJECT_ID/attestors/existing-keypair-attestor-passwordless
                cluster-name: multi-project-docker

      # use existing keypair (w/ pw)
      # long-running cluster, attestor
      - bin-authz/create-attestation:
          name: multi-project-long-running-master
          multi-project-setup: true
          # keypair
          keypair-email: community-partner@circleci.com
          use-passphrase: true
          public-key: BIN_AUTHZ_PUBLIC_KEY_WITH_PW
          private-key: BIN_AUTHZ_PRIVATE_KEY_WITH_PW
          # policy
          configure-policy: true
          default-required-attestors: projects/$ATTESTOR_PROJECT_ID/attestors/$CIRCLE_USERNAME
          # image/attestation
          image-path: gcr.io/google-containers/google-containers-test-image
          image-tag: "2017-01-23"
          # circle
          filters: *integration-master_filters
          requires: [upsize-long-running-cluster-multi-proj-master]
          post-steps:
            - resize-cluster:
                cluster-name: binauthz-orb-test-cluster-multi-proj
                num-nodes: "0"

      # +++++++++++++++++++++++++++++++++
      # patch, minor, or major publishing
      # +++++++++++++++++++++++++++++++++

      - orb-tools/dev-promote-prod:
          name: dev-promote-patch
          context: orb-publishing
          orb-name: circleci/gcp-binary-authorization
          requires: *prod-deploy_requires
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-patch.*/

      - orb-tools/dev-promote-prod:
          name: dev-promote-minor
          context: orb-publishing
          orb-name: circleci/gcp-binary-authorization
          release: minor
          requires: *prod-deploy_requires
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-minor.*/

      - orb-tools/dev-promote-prod:
          name: dev-promote-major
          context: orb-publishing
          orb-name: circleci/gcp-binary-authorization
          release: major
          requires: *prod-deploy_requires
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-major.*/
