description: >
  Get set up to use Google's Binary Authorization on CircleCI. This job
  is designed to be run once to initialize Binary Authorization for a
  particular CircleCI project. It will enable all required APIs,
  optionally create a GKE cluster, create an attestor, optionally
  generate and store a PGP keypair, and optionally create and store a
  Binary Authorization policy YAML file. After running this job
  successfully, it can be removed from your config.yml file. To use this
  job, at least one existing Google project is required; if using a
  multi-project Binary Authorization setup, three separate Google
  projects (deployer, attestor, attestation) are required. This job is
  also available as an orb command, also called `setup`, if more control
  over its mode of execution is desired. For further information, see
  Google's Binary Authorization documentation:
  https://cloud.google.com/binary-authorization/docs/overview

executor: <<parameters.executor>>

parameters:
  executor:
    type: executor
    default: default
    description: >
      Executor to use for this job, defaults to Google's official
      Docker image with the gcloud CLI preinstalled

  checkout:
    type: boolean
    default: false
    description: >
      Checkout as a first step? Default is `false`

  attach-workspace:
    type: boolean
    default: false
    description: >
      Attach to an existing workspace? Default is `false`

  workspace-root:
    type: string
    default: workspace
    description: >
      Workspace root path that is either an absolute path or a path relative
      to the working directory.

  google-compute-zone:
    type: env_var_name
    default: GOOGLE_COMPUTE_ZONE
    description: >
      Name of environment variable storing the Google compute zone to use
      by default when running commands with the gcloud CLI

  multi-project-setup:
    type: boolean
    default: false
    description: >
      Set to `true` if a multi-GCP project Binary Authorization setup is
      being used. See the following for details:
      https://cloud.google.com/binary-authorization/docs/multi-project-setup-cli

  google-project-id:
    type: env_var_name
    default: GOOGLE_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID. Not
      required if using a multi-project setup.

  google-service-account:
    type: env_var_name
    default: GOOGLE_SERVICE_ACCOUNT
    description: >
      Name of environment variable storing the service account address for
      the Google project. Not required if using a multi-project setup.

  google-service-key:
    type: env_var_name
    default: GOOGLE_SERVICE_KEY
    description: >
      Name of environment variable storing the full service key JSON file
      for the Google project. Not required if using a multi-project setup.

  deployer-project-id:
    type: env_var_name
    default: DEPLOYER_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      deployer project. Only required if using a multi-project setup.

  deployer-service-account:
    type: env_var_name
    default: DEPLOYER_SERVICE_ACCOUNT
    description: >
      Name of environment variable storing the service account address for
      the deployer Google project. Only required if using a multi-project
      setup.

  deployer-service-key:
    type: env_var_name
    default: DEPLOYER_SERVICE_KEY
    description: >
      Name of environment variable storing the full service key JSON file
      for the deployer Google project. Only required if using a multi-
      project setup.

  attestor-project-id:
    type: env_var_name
    default: ATTESTOR_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  attestor-service-account:
    type: env_var_name
    default: ATTESTOR_SERVICE_ACCOUNT
    description: >
      Name of environment variable storing the service account address for
      the attestor Google project. Only required if using a multi-project
      setup.

  attestation-project-id:
    type: env_var_name
    default: ATTESTATION_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  create-new-gke-cluster:
    type: boolean
    default: false
    description: >
      Create a new GKE cluster to use with Binary Authorization? Defaults
      to `false`

  gke-cluster-name:
    type: string
    default: ""
    description: >
      Name of the GKE cluster for which to enable Binary Authorization

  attestor:
    type: string
    default: $CIRCLE_USERNAME
    description: >
      Name of the attestation authority for the container analysis note.
      If the attestor does not yet exist, it will be created. Defaults to
      the value of the `$CIRCLE_USERNAME` environment variable (VCS user who
      triggered the CircleCI job).

  attestor-hint:
    type: string
    default: CircleCI username
    description: >
      A human-readable name for this attestation authority (e.g., QA)

  note-id:
    type: string
    default: $CIRCLE_USERNAME-note-$CIRCLE_JOB-$CIRCLE_BUILD_NUM
    description: >
      Name of the container analysis note. Defaults to a combination of
      values from the attestor parameter, and CircleCI job name and number
      environment variables.

  note-description-short:
    type: string
    default: Container analysis note from CircleCI job $CIRCLE_JOB, number $CIRCLE_BUILD_NUM, triggered by $CIRCLE_USERNAME
    description: One-sentence description of this note

  note-description-long:
    type: string
    default: ""
    description: Longer, more detailed description of this note

  note-related-url:
    type: string
    default: $CIRCLE_BUILD_URL
    description: Any URL related to the note

  note-expiration-time:
    type: string
    default: ""
    description: >
      Timestamp-formatted expiration time for this note (empty if the
      note does not expire). For details, see the following:
      https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp

  related-note-names:
    type: string
    default: ""
    description: Names of any notes relevant or related to this note

  use-note-file:
    type: boolean
    default: false
    description: >
      Upload an existing container analysis note file instead of creating
      one via this command's paramaters?

  note-filepath:
    type: string
    default: /tmp/note_payload.json
    description: >
      Path to your container analysis note file. Should be an existing file
      if `use-note-file` is `true`; otherwise, note will be created at this path.

  use-existing-keypair:
    type: boolean
    default: true
    description: >
      Use an existing PGP keypair? If `false`, a keypair will be created
      on-the-fly

  store-generated-keypair:
    type: boolean
    default: true
    description: >
      Store public and private portions of generated keypair as CircleCI
      environment variables?

  keypair-email:
    type: string
    default: ""
    description: >
      Email address to attach to PGP keypair. Only required here if
      `use-existing-keypair` is set to `false` (required by subsequent commands either way).

  keypair-name:
    type: string
    default: ""
    description: >
      Name to attach to PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  use-passphrase:
    type: boolean
    default: false
    description: >
      Generate a PGP keypair with a passphrase? Only required if
      `use-existing-keypair` is set to `false`

  keypair-passphrase:
    type: env_var_name
    default: BIN_AUTHZ_KEYPAIR_PASSPHRASE
    description: >
      Name of environment variable storing a passphrase to use when
      generating a PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  public-key:
    type: env_var_name
    default: BIN_AUTHZ_PUBLIC_KEY
    description: >
      Name of environment variable storing or under which to store the
      public portion of the keypair with which to sign the attestation. Not
      required if `use-existing-keypair` is set to `false`. Store the public
      key in Contexts or as a project-level environment variable, as a
      single-line string, with newlines replaced with the newline string
      literal `\n`. Use an RSA-2048-type key. See Google's documentation:
      https://cloud.google.com/binary-authorization/docs/creating-attestors-cli#create_a_pgp_key_pair

  private-key:
    type: env_var_name
    default: BIN_AUTHZ_PRIVATE_KEY
    description: >
      Name of environment variable under which to store the private portion
      of the keypair generated to use with Binary Authorization. Only
      required here if `use-existing-keypair` is set to `false` and
      `store-generated-keypair` is set to true (required by subsequent
      commands either way).

  circle-token:
    type: env_var_name
    default: CIRCLE_TOKEN
    description: >
      Name of environment variable storing a CircleCI API token, for
      authenticating calls to store project environment variables. Only
      required if generating and storing a new keypair.

  configure-policy:
    type: boolean
    default: true
    description: >
      Configure a Binary Authorization policy as part of setup? Choose
      `true` if a single policy will most likely persist across future
      deployments; choose `false` if a new policy will be generated for
      each deployment.

  use-policy-file:
    type: boolean
    default: false
    description: >
      Use an existing Binary Authorization policy YAML file instead of
      creating one via this command's paramaters?

  policy-filepath:
    type: string
    default: /tmp/policy.yaml
    description: >
      Path to a Binary Authorization policy YAML file. Should be an
      existing file if `use-policy-file` is `true`; otherwise, a policy file
      will be created at this path.

  admission-whitelist-patterns:
    type: string
    default: gcr.io/google_containers/*,k8s.gcr.io/*,gcr.io/stackdriver-agents/*
    description: >
      Whitelist of container images that are exempt from the attestation
      requirements in the policy. Supply a comma-separated string list
      (e.g., see default value) of paths to images in Google's, or any
      other, container registry. For details, see the following:
      https://cloud.google.com/binary-authorization/docs/policy-yaml-reference#admissionwhitelistpatterns

  default-evaluation-mode:
    type: enum
    enum: [ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION]
    default: REQUIRE_ATTESTATION
    description: >
      By default, how should Binary Authorization evaluate deployment
      requests? For details on these options, see the following:
      https://cloud.google.com/binary-authorization/docs/policy-yaml-reference#evaluationmode

  default-required-attestors:
    type: string
    default: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME
    description: >
      What attestors will be required to sign releases, by default? Specify
      attestors in the form `project/PROJECT_ID/attestors/ATTESTOR_NAME`:
      https://cloud.google.com/binary-authorization/docs/policy-yaml-reference#admission_rule
      To specify multiple attestors, use a comma-separated string.

  cluster-specific-rules:
    type: boolean
    default: false
    description: >
      Specify distinict sets of deployment rules for individual GKE
      clusters? If so, pass the requisite values to any additional
      cluster-specific parameters. Currently, only a single set of cluster-
      specific rules can be specified. For details, see the following:
      https://cloud.google.com/binary-authorization/docs/key-concepts#cluster-specific_rules

  cluster-specific-specifier:
    type: env_var_name
    default: CLUSTER_SPECIFIER_LOCATION_NAME
    description: >
      If specifying a set of cluster-specific rules, what is the name of
      the GKE cluster to which these rules will apply? Supply an environment
      variable storing a GKE cluster name in the `location.name` format
      (e.g., `us-east1-a.prod-cluster`)

  cluster-specific-eval-mode:
    type: enum
    enum: [ALWAYS_ALLOW, ALWAYS_DENY, REQUIRE_ATTESTATION]
    default: REQUIRE_ATTESTATION
    description: >
      For the specified cluster, how should Binary Authorization evaluate
      deployment requests? For details on these options, see the following:
      https://cloud.google.com/binary-authorization/docs/policy-yaml-reference#evaluationmode

  cluster-specific-required-attestors:
    type: string
    default: projects/$GOOGLE_PROJECT_ID/attestors/$CIRCLE_USERNAME
    description: >
      What attestors will be required to sign releases, for cluster-
      specific rulesets? Specify attestors in the form
      `project/PROJECT_ID/attestors/ATTESTOR_NAME`, as described here:
      https://cloud.google.com/binary-authorization/docs/policy-yaml-reference#admission_rule
      To specify multiple attestors, use a comma-separated string.

steps:
  - when:
      condition: <<parameters.checkout>>
      steps:
        - checkout

  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace-root>>

  - gcp-cli/install

  - gcp-cli/initialize:
      gcloud-service-key: <<#parameters.multi-project-setup>><<parameters.deployer-service-key>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-service-key>><</parameters.multi-project-setup>>
      google-project-id: <<#parameters.multi-project-setup>><<parameters.deployer-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>>
      google-compute-zone: <<parameters.google-compute-zone>>

  - setup:
      google-compute-zone: <<parameters.google-compute-zone>>
      multi-project-setup: <<parameters.multi-project-setup>>
      google-project-id: <<parameters.google-project-id>>
      google-service-account: <<parameters.google-service-account>>
      deployer-project-id: <<parameters.deployer-project-id>>
      deployer-service-account: <<parameters.deployer-service-account>>
      attestor-project-id: <<parameters.attestor-project-id>>
      attestor-service-account: <<parameters.attestor-service-account>>
      attestation-project-id: <<parameters.attestation-project-id>>
      create-new-gke-cluster: <<parameters.create-new-gke-cluster>>
      gke-cluster-name: <<parameters.gke-cluster-name>>
      attestor: <<parameters.attestor>>
      attestor-hint: <<parameters.attestor-hint>>
      note-id: <<parameters.note-id>>
      note-description-short: <<parameters.note-description-short>>
      note-description-long: <<parameters.note-description-long>>
      note-related-url: <<parameters.note-related-url>>
      note-expiration-time: <<parameters.note-expiration-time>>
      related-note-names: <<parameters.related-note-names>>
      use-note-file: <<parameters.use-note-file>>
      note-filepath: <<parameters.note-filepath>>
      use-existing-keypair: <<parameters.use-existing-keypair>>
      keypair-email: <<parameters.keypair-email>>
      keypair-name: <<parameters.keypair-name>>
      use-passphrase: <<parameters.use-passphrase>>
      keypair-passphrase: <<parameters.keypair-passphrase>>
      store-generated-keypair: <<parameters.store-generated-keypair>>
      public-key: <<parameters.public-key>>
      private-key: <<parameters.private-key>>
      circle-token: <<parameters.circle-token>>
      configure-policy: <<parameters.configure-policy>>
      use-policy-file: <<parameters.use-policy-file>>
      policy-filepath: <<parameters.policy-filepath>>
      admission-whitelist-patterns: <<parameters.admission-whitelist-patterns>>
      default-evaluation-mode: <<parameters.default-evaluation-mode>>
      default-required-attestors: <<parameters.default-required-attestors>>
      cluster-specific-rules: <<parameters.cluster-specific-rules>>
      cluster-specific-specifier: <<parameters.cluster-specific-specifier>>
      cluster-specific-eval-mode: <<parameters.cluster-specific-eval-mode>>
      cluster-specific-required-attestors: <<parameters.cluster-specific-required-attestors>>

  - get-gke-credentials:
      google-compute-zone: <<parameters.google-compute-zone>>
      multi-project-setup: <<parameters.multi-project-setup>>
      google-project-id: <<parameters.google-project-id>>
      deployer-project-id: <<parameters.deployer-project-id>>
      gke-cluster-name: <<parameters.gke-cluster-name>>
