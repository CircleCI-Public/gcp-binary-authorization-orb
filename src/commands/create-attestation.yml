description: >
  Create a Binary Authorization attestation authorizing a container
  image for deployment. See Google's Binary Authorization documentation:
  https://cloud.google.com/binary-authorization/docs/key-concepts#attestations
  https://cloud.google.com/binary-authorization/docs/making-attestations

parameters:
  google-project-id:
    type: env_var_name
    default: GOOGLE_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID. Not
      required if using a multi-project setup.

  multi-project-setup:
    type: boolean
    default: false
    description: >
      Set to `true` if a multi-GCP project Binary Authorization setup is
      being used. See the following for details:
      https://cloud.google.com/binary-authorization/docs/multi-project-setup-cli

  attestor-project-id:
    type: env_var_name
    default: ATTESTOR_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  attestation-project-id:
    type: env_var_name
    default: ATTESTATION_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  image-path:
    type: string
    description: >
      Path in Google's, or any other, container registry to the image
      being deployed (e.g., `gcr.io/example-project/quickstart-image`)

  image-tag:
    type: string
    default: latest
    description: >
      Specific tag of image that will be deployed, used to generate a full
      SHA-256 for attestation.

  payload-filepath:
    type: string
    default: /tmp/generated_payload.json
    description: Path at which to generate an attestation payload

  use-existing-keypair:
    type: boolean
    default: true
    description: >
      Use an existing PGP keypair? Only select `false` if a keypair was
      generated on-the-fly in the `create-attestor` command

  public-key:
    type: env_var_name
    default: BIN_AUTHZ_PUBLIC_KEY
    description: >
      Name of environment variable storing the public portion of the keypair
      with which to sign the attestation. Not required if
      `use-existing-keypair` is set to `false`. Store the public key in
      Contexts or as a project-level environment variable, as a single-line
      string, with newlines replaced with the newline string literal `\n`.
      Use an RSA-2048-type key. See Google's documentation for details:
      https://cloud.google.com/binary-authorization/docs/key-concepts#pgp_keys

  private-key:
    type: env_var_name
    default: BIN_AUTHZ_PRIVATE_KEY
    description: >
      Name of environment variable storing the private portion of the
      keypair with which to sign the attestation. Not required if
      `use-existing-keypair` is set to `false`. Store the private key in
      Contexts or as a project-level environment variable, as a single-line
      string, with newlines replaced with the newline string literal `\n`.
      Use an RSA-2048-type key. See Google's documentation for details:
      https://cloud.google.com/binary-authorization/docs/key-concepts#pgp_keys

  keypair-email:
    type: string
    description: Email address attached to PGP keypair

  use-passphrase:
    type: boolean
    default: false
    description: Does the existing PGP keypair have a passphrase?

  keypair-passphrase:
    type: env_var_name
    default: BIN_AUTHZ_KEYPAIR_PASSPHRASE
    description: >
      Name of environment variable storing the passphrase used to
      generate PGP keypair

  attestor:
    type: string
    default: $CIRCLE_USERNAME
    description: >
      Name of the attestation authority for the container analysis note.
      If the attestor does not yet exist, it will be created. Defaults to
      the value of the `$CIRCLE_USERNAME` environment variable (VCS user who
      triggered the CircleCI job).

steps:
  - run:
      name: Store image digest
      command: |
        DIGEST=$(gcloud container images describe \
          <<parameters.image-path>>:<<parameters.image-tag>> \
          --format='get(image_summary.digest)')

        echo $DIGEST > DIGEST.txt

  - run:
      name: Create attestation payload
      command: |
        DIGEST=$(cat DIGEST.txt)

        gcloud beta container binauthz create-signature-payload \
          --artifact-url="<<parameters.image-path>>@$DIGEST" \
          > <<parameters.payload-filepath>>

  - when:
      condition: <<parameters.use-existing-keypair>>
      steps:
        - run:
            name: Set up public/private keys
            command: |
              echo -e $<<parameters.public-key>> > public.key
              echo -e $<<parameters.private-key>> > private.key

              gpg --import public.key
              gpg --import private.key

  - run:
      name: Extract keypair fingerprint
      command: |
        # extract fingerprint from key
        FINGERPRINT_STRING=$(gpg \
          --list-keys --with-fingerprint --with-colons \
          <<parameters.keypair-email>> | \
          grep fpr)

        # use colon delimiters to separate fingerprint
        arrFINGERPRINT=(${FINGERPRINT_STRING//:/ })

        FINGERPRINT=${arrFINGERPRINT[-1]}

        echo $FINGERPRINT > FINGERPRINT.txt

  - when:
      condition: <<parameters.use-existing-keypair>>
      steps:
        - run:
            name: Set up attestation signing
            command: |
              # set sudo to work whether logged in as root user or non-root user
              if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

              $SUDO apt-get -y install expect

              FINGERPRINT=$(cat FINGERPRINT.txt)

              expect -c "spawn gpg --edit-key \
                $FINGERPRINT \
                trust quit; send \"5\ry\r\"; expect eof"

  - when:
      condition: <<parameters.use-passphrase>>
      steps:
        - run:
            name: Sign attestation payload
            command: |
              # GPG_TTY=$(tty)
              # export GPG_TTY

              # have to sign like this on gpg v1.x
              if [[ $(gpg --version | grep ") 1.") ]]; then
                echo $<<parameters.keypair-passphrase>> | gpg \
                  --batch --yes --passphrase-fd 0 \
                  --local-user <<parameters.keypair-email>> \
                  --passphrase $<<parameters.keypair-passphrase>> \
                  --armor \
                  --output /tmp/generated_signature.pgp \
                  --sign <<parameters.payload-filepath>>

              # & sign like this on gpg v2.x
              elif [[ $(gpg --version | grep ") 2.") ]]; then
                echo $<<parameters.keypair-passphrase>> | gpg \
                  --pinentry-mode loopback \
                  --local-user <<parameters.keypair-email>> \
                  --passphrase $<<parameters.keypair-passphrase>> \
                  --armor \
                  --output /tmp/generated_signature.pgp \
                  --sign <<parameters.payload-filepath>>

              fi

  - unless:
      condition: <<parameters.use-passphrase>>
      steps:
        - run:
            name: Sign attestation payload
            command: |
              gpg \
                --local-user <<parameters.keypair-email>> \
                --armor \
                --output /tmp/generated_signature.pgp \
                --sign <<parameters.payload-filepath>>

  - run:
      name: Create attestation
      command: |
        FINGERPRINT=$(cat FINGERPRINT.txt)
        DIGEST=$(cat DIGEST.txt)

        gcloud --project=$<<#parameters.multi-project-setup>><<parameters.attestation-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
          beta container binauthz attestations create \
          --artifact-url="<<parameters.image-path>>@$DIGEST" \
          --attestor="projects/$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>>/attestors/<<parameters.attestor>>" \
          --signature-file=/tmp/generated_signature.pgp \
          --pgp-key-fingerprint="$FINGERPRINT"

          rm -rf FINGERPRINT.txt
          rm -rf DIGEST.txt

  - run:
      name: Verify attestation creation
      command: |
        sleep 10 && gcloud --project=$<<#parameters.multi-project-setup>><<parameters.attestation-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
          beta container binauthz attestations list \
          --attestor=<<parameters.attestor>> \
          --attestor-project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> | \
          grep -v "Listed 0 items"

  - store_artifacts:
      path: <<parameters.payload-filepath>>
