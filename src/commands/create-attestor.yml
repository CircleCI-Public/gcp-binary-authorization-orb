description: >
  Create an attestor in Binary Authorization. For details, see:
  https://cloud.google.com/binary-authorization/docs/key-concepts#attestors

parameters:
  attestor:
    type: string
    default: $CIRCLE_USERNAME
    description: >
      Name of the attestation authority for the container analysis note.
      If the attestor does not yet exist, it will be created. Defaults to
      the value of the `$CIRCLE_USERNAME` environment variable (VCS user who
      triggered the CircleCI job).

  multi-project-setup:
    type: boolean
    default: false
    description: >
      Set to `true` if a multi-GCP project Binary Authorization setup is
      being used. See the following for details:
      https://cloud.google.com/binary-authorization/docs/multi-project-setup-cli

  google-project-id:
    type: env_var_name
    default: GOOGLE_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID. Not
      required if using a multi-project setup.

  attestor-project-id:
    type: env_var_name
    default: ATTESTOR_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  use-existing-keypair:
    type: boolean
    default: true
    description: >
      Use an existing PGP keypair? If `false`, a keypair will be created
      on-the-fly

  keypair-email:
    type: string
    description: >
      Email address to attach to PGP keypair. Only required if
      `use-existing-keypair` is set to `false`.

  keypair-name:
    type: string
    default: ""
    description: >
      Name to attach to PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  use-passphrase:
    type: boolean
    default: false
    description: >
      Generate a PGP keypair with a passphrase? Only required if
      `use-existing-keypair` is set to `false`

  keypair-passphrase:
    type: env_var_name
    default: BIN_AUTHZ_KEYPAIR_PASSPHRASE
    description: >
      Name of environment variable storing a passphrase to use when
      generating a PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  public-key:
    type: env_var_name
    default: BIN_AUTHZ_PUBLIC_KEY
    description: >
      Name of environment variable storing the public portion of the keypair
      with which to sign the attestation. Not required if
      `use-existing-keypair` is set to `false`. Store the public key in
      Contexts or as a project-level environment variable, as a single-line
      string, with newlines replaced with the newline string literal `\n`.
      Use an RSA-2048-type key. See Google's documentation for details:
      https://cloud.google.com/binary-authorization/docs/key-concepts#pgp_keys

  note-id:
    type: string
    default: $CIRCLE_USERNAME-note-$CIRCLE_JOB-$CIRCLE_BUILD_NUM
    description: >
      Name of the container analysis note. Defaults to a combination of
      values from the attestor parameter, and CircleCI job name and number
      environment variables.

  deployer-service-account:
    type: env_var_name
    default: DEPLOYER_SERVICE_ACCOUNT
    description: >
      Name of environment variable storing the service account address for
      the deployer Google project. Only required if using a multi-project
      setup.

steps:
  - run:
      name: Create attestor
      command: |
        gcloud --project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
            beta container binauthz attestors create <<parameters.attestor>> \
            --attestation-authority-note=<<parameters.note-id>> \
            --attestation-authority-note-project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>>

  - unless:
      condition: <<parameters.use-existing-keypair>>
      steps:
        - run:
            name: Boost entropy for key generation
            command: |
              # set sudo to work whether logged in as root user or non-root user
              if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

              $SUDO apt-get install -y haveged

        - run:
            name: Generate PGP keypair
            command: |
              gpg --batch --gen-key <(
                cat \<<- EOF
                  Key-Type: RSA
                  Key-Length: 2048
                  Name-Real: <<parameters.keypair-name>>
                  Name-Email: <<parameters.keypair-email>><<#parameters.use-passphrase>>
                  Passphrase: $<<parameters.keypair-passphrase>><</parameters.use-passphrase>>
                  %commit
              EOF
              )

  - run:
      name: Add PGP public key to attestor
      command: |
        if <<parameters.use-existing-keypair>>; then
          echo -e $<<parameters.public-key>> > /tmp/generated-key.pgp
        else
          # extract fingerprint from key
          FINGERPRINT_STRING=$(gpg \
            --list-keys --with-fingerprint --with-colons \
            <<parameters.keypair-email>> | \
            grep fpr)

          # use colon delimiters to separate fingerprint
          arrFINGERPRINT=(${FINGERPRINT_STRING//:/ })

          FINGERPRINT=${arrFINGERPRINT[-1]}

          gpg --armor --export ${FINGERPRINT} > /tmp/generated-key.pgp
        fi

        gcloud beta container binauthz attestors public-keys add \
          --attestor=<<parameters.attestor>> \
          --public-key-file=/tmp/generated-key.pgp

  - run:
      name: Verify attestor creation with key
      command: |
        gcloud --project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
          beta container binauthz attestors list | \
          grep "<<parameters.attestor>>"

  - when:
      condition: <<parameters.multi-project-setup>>
      steps:
        - run:
            name: Add deployer project IAM role binding
            command: |
              gcloud --project $<<parameters.attestor-project-id>> \
                beta container binauthz attestors add-iam-policy-binding \
                "projects/$<<parameters.attestor-project-id>>/attestors/<<parameters.attestor>>" \
                --member="serviceAccount:$<<parameters.deployer-service-account>>" \
                --role=roles/binaryauthorization.attestorsVerifier
