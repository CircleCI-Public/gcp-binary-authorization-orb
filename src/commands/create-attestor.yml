description: >
  Create an attestor in Binary Authorization. For details, see:
  https://cloud.google.com/binary-authorization/docs/key-concepts#attestors

parameters:
  attestor:
    type: string
    default: $CIRCLE_USERNAME
    description: >
      Name of the attestation authority for the container analysis note.
      If the attestor does not yet exist, it will be created. Defaults to
      the value of the `$CIRCLE_USERNAME` environment variable (VCS user who
      triggered the CircleCI job).

  multi-project-setup:
    type: boolean
    default: false
    description: >
      Set to `true` if a multi-GCP project Binary Authorization setup is
      being used. See the following for details:
      https://cloud.google.com/binary-authorization/docs/multi-project-setup-cli

  google-project-id:
    type: env_var_name
    default: GOOGLE_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID. Not
      required if using a multi-project setup.

  attestor-project-id:
    type: env_var_name
    default: ATTESTOR_PROJECT_ID
    description: >
      Name of environment variable storing the Google project ID for the
      attestor project. Only required if using a multi-project setup.

  use-existing-keypair:
    type: boolean
    default: true
    description: >
      Use an existing PGP keypair? If `false`, a keypair will be created
      on-the-fly

  keypair-name:
    type: string
    default: ""
    description: >
      Name to attach to PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  keypair-email:
    type: string
    default: ""
    description: >
      Email address to attach to PGP keypair. Only required here if
      `use-existing-keypair` is set to `false` (required by subsequent commands either way).

  use-passphrase:
    type: boolean
    default: false
    description: >
      Generate a PGP keypair with a passphrase? Only required if
      `use-existing-keypair` is set to `false`

  keypair-passphrase:
    type: env_var_name
    default: BIN_AUTHZ_KEYPAIR_PASSPHRASE
    description: >
      Name of environment variable storing a passphrase to use when
      generating a PGP keypair. Only required if `use-existing-keypair`
      is set to `false`.

  store-generated-keypair:
    type: boolean
    default: true
    description: >
      Store public and private portions of generated keypair as CircleCI
      environment variables?

  public-key:
    type: env_var_name
    default: BIN_AUTHZ_PUBLIC_KEY
    description: >
      Name of environment variable storing the public portion of the keypair
      with which to sign the attestation. If `use-existing-keypair` is set
      to `false` and `store-generated-keypair` is set to true, the public
      key will be stored in CircleCI as a project environment variable under
      this name. Otherwise, please store the public key in Contexts or as a
      project-level environment variable, as a single-line string, with
      newlines replaced with the newline string literal `\n`. Use an RSA-
      2048-type key. See Google's PGP key documentation for details:
      https://cloud.google.com/binary-authorization/docs/creating-attestors-cli#create_a_pgp_key_pair

  private-key:
    type: env_var_name
    default: BIN_AUTHZ_PRIVATE_KEY
    description: >
      Name of environment variable under which to store the private portion
      of the keypair generated to use with Binary Authorization. Only
      required here if `use-existing-keypair` is set to `false` and
      `store-generated-keypair` is set to true (required by subsequent
      commands either way).

  circle-token:
    type: env_var_name
    default: CIRCLE_TOKEN
    description: >
      Name of environment variable storing a CircleCI API token, for
      authenticating calls to store project environment variables. Only
      required if `use-existing-keypair` is set to `false` and
      `store-generated-keypair` is set to true.

  note-id:
    type: string
    default: $CIRCLE_USERNAME-note-$CIRCLE_JOB-$CIRCLE_BUILD_NUM
    description: >
      Name of the container analysis note. Defaults to a combination of
      values from the attestor parameter, and CircleCI job name and number
      environment variables.

  deployer-service-account:
    type: env_var_name
    default: DEPLOYER_SERVICE_ACCOUNT
    description: >
      Name of environment variable storing the service account address for
      the deployer Google project. Only required if using a multi-project
      setup.

steps:
  - run:
      name: Create attestor
      command: |
        gcloud \
          --project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
            beta container binauthz attestors create <<parameters.attestor>> \
            --attestation-authority-note=<<parameters.note-id>> \
            --attestation-authority-note-project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>>

        echo "Success! Attestor <<parameters.attestor>> has been created"

  - unless:
      condition: <<parameters.use-existing-keypair>>
      steps:
        - generate-keypair:
            keypair-name: <<parameters.keypair-name>>
            keypair-email: <<parameters.keypair-email>>
            use-passphrase: <<parameters.use-passphrase>>
            keypair-passphrase: <<parameters.keypair-passphrase>>
            store-generated-keypair: <<parameters.store-generated-keypair>>
            public-key: <<parameters.public-key>>
            private-key: <<parameters.private-key>>
            circle-token: <<parameters.circle-token>>

  - run:
      name: Add PGP public key to attestor
      command: |
        if <<parameters.use-existing-keypair>>; then
          echo -e $<<parameters.public-key>> > /tmp/generated-key.pgp
        else
          # extract fingerprint from key
          FINGERPRINT_STRING=$(gpg \
            --list-keys --with-fingerprint --with-colons \
            <<parameters.keypair-email>> | \
            grep fpr)

          # use colon delimiters to separate fingerprint
          arrFINGERPRINT=(${FINGERPRINT_STRING//:/ })

          FINGERPRINT=${arrFINGERPRINT[-1]}

          gpg --armor --export ${FINGERPRINT} > /tmp/generated-key.pgp
        fi

        gcloud beta container binauthz attestors public-keys add \
          --attestor="<<#parameters.multi-project-setup>>projects/$<<parameters.attestor-project-id>>/attestors/<</parameters.multi-project-setup>><<parameters.attestor>>" \
          --public-key-file=/tmp/generated-key.pgp

  - run:
      name: Verify attestor creation with key
      command: |
        gcloud \
          --project=$<<#parameters.multi-project-setup>><<parameters.attestor-project-id>><</parameters.multi-project-setup>><<^parameters.multi-project-setup>><<parameters.google-project-id>><</parameters.multi-project-setup>> \
          beta container binauthz attestors list | \
          grep "<<parameters.attestor>>"

  - when:
      condition: <<parameters.multi-project-setup>>
      steps:
        - run:
            name: Add deployer project IAM role binding
            command: |
              gcloud \
                --project $<<parameters.attestor-project-id>> \
                beta container binauthz attestors add-iam-policy-binding \
                "projects/$<<parameters.attestor-project-id>>/attestors/<<parameters.attestor>>" \
                --member="serviceAccount:$<<parameters.deployer-service-account>>" \
                --role=roles/binaryauthorization.attestorsVerifier
